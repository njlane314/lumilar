#include "AnalysisManager.hh"

AnalysisManager* AnalysisManager::instance_ = nullptr;

AnalysisManager::AnalysisManager() {
    hist_charge_energy = new TH2F("","",100,1,0,100,1,0);
    hist_light_energy = new TH2F("","",100,1,0,100,1,0);
    hist_quanta_energy = new TH2F("","",100,1,0,100,1,0);

    hist_charge = new TH1F("","",100,1,0);
    hist_light = new TH1F("","",100,1,0);
    hist_quanta = new TH1F("","",100,1,0);

    hist_charge_step = new TH1F("","",100,1,0);
    hist_light_step = new TH1F("","",100,1,0);
    hist_quanta_step = new TH1F("","",100,1,0);

    hist_light_time = new TH1F("","",100,1,0);

    entry_counter_ = 0;
}

AnalysisManager::~AnalysisManager() {}

AnalysisManager* AnalysisManager::Instance() {
    if (!instance_) {
        instance_ = new AnalysisManager();
    }
    
    return instance_;
}

void AnalysisManager::RecordEntry(const G4Event* event, const Scintillation* scintillation, const Ionisation* ionisation) {
    entry_counter_++;
    double energy = event->GetPrimaryVertex(0)->GetPrimary(0)->GetKineticEnergy();
    std::vector<double> radiant_sizes = scintillation->get_radiant_sizes();
    std::vector<double> cloud_sizes = ionisation->get_cloud_sizes();
    std::vector<double> emission_times = scintillation->get_emission_times();
    
    int photon_num = 0;
    int electron_num = 0;
    if (radiant_sizes.size() == cloud_sizes.size()) {
        for (int i = 0; i < radiant_sizes.size(); i++) {
            photon_num += radiant_sizes[i];
            electron_num += cloud_sizes[i];

            hist_light_step->Fill(radiant_sizes[i]);
            hist_charge_step->Fill(cloud_sizes[i]);
            hist_quanta_step->Fill(radiant_sizes[i] + cloud_sizes[i]);
        }
    } else {
        abort();
    }

    hist_light->Fill(photon_num);
    hist_charge->Fill(electron_num);
    hist_quanta->Fill(photon_num + electron_num);

    hist_light_energy->Fill(energy, photon_num);
    hist_charge_energy->Fill(energy, electron_num);
    hist_quanta_energy->Fill(energy, photon_num+electron_num);

    for (int i = 0; i < emission_times.size(); i++) {
        hist_light_time->Fill(emission_times[i]);
    }

    if (entry_counter_ % 100 == 0) {
        TFile *file = TFile::Open("analysis.root", "UPDATE");

        TH1F *hist_charge = (TH1F*)file->Get("hist_charge");

        if (!hist_charge) {
            hist_charge = new TH1F("hist_charge","",100,1,0);
        }

        hist_charge->Write();
        hist_light->Write();
        hist_quanta->Write();
        
        hist_charge_energy->Write();
        hist_light_energy->Write();

        hist_charge_step->Write();
        hist_light_step->Write();

        hist_light_time->Write();

        hist_quanta_energy->Write();
        hist_quanta_step->Write();

        file->Close();

        hist_charge->Reset();
        hist_light->Reset();
        hist_quanta->Reset();

        hist_charge_energy->Reset();
        hist_light_energy->Reset();
        hist_quanta_energy->Reset();

        hist_charge_step->Reset();
        hist_light_step->Reset();
        hist_quanta_step->Reset();

        hist_light_time->Reset();
    }
}

void AnalysisManager::Write() {
    /*std::cout << "Closing file" << std::endl;
    TCanvas *c_light_energy = new TCanvas();
    hist_light_energy->SetStats(0);
    hist_light_energy->GetXaxis()->SetTitle("Electron energy [MeV]");
    hist_light_energy->GetYaxis()->SetTitle("Optical photons");
    hist_light_energy->Draw("colz");
    c_light_energy->SaveAs("optical_photons.png");

    TCanvas *c_charge_energy = new TCanvas();
    hist_charge_energy->SetStats(0);
    hist_charge_energy->GetXaxis()->SetTitle("Electron energy [MeV]");
    hist_charge_energy->GetYaxis()->SetTitle("Thermal electrons");
    hist_charge_energy->Draw("colz");
    c_charge_energy->SaveAs("thermal_electrons.png");

    TCanvas *c_quanta_energy = new TCanvas();
    hist_quanta_energy->SetStats(0);
    hist_quanta_energy->GetXaxis()->SetTitle("Electron energy [MeV]");
    hist_quanta_energy->GetYaxis()->SetTitle("Signal quanta");
    hist_quanta_energy->Draw("colz");
    c_quanta_energy->SaveAs("signal_quanta.png");

    TCanvas *c_light = new TCanvas();
    hist_light->SetStats(0);
    hist_light->GetXaxis()->SetTitle("Optical photons");
    hist_light->GetYaxis()->SetTitle("Entries");
    hist_light->Draw();
    c_light->SaveAs("optical_photons_hist.png");

    TCanvas *c_charge = new TCanvas();
    hist_charge->SetStats(0);
    hist_charge->GetXaxis()->SetTitle("Thermal electrons");
    hist_charge->GetYaxis()->SetTitle("Entries");
    hist_charge->Draw();
    c_charge->SaveAs("thermal_electrons_hist.png");

    TCanvas *c_quanta = new TCanvas();
    hist_quanta->SetStats(0);
    hist_quanta->GetXaxis()->SetTitle("Signal quanta");
    hist_quanta->GetYaxis()->SetTitle("Entries");
    hist_quanta->Draw();
    c_quanta->SaveAs("signal_quanta_hist.png");

    TCanvas *c_light_time = new TCanvas();
    hist_light_time->SetStats(0);
    hist_light_time->GetXaxis()->SetTitle("Time [ns]");
    hist_light_time->GetYaxis()->SetTitle("Entries");  
    c_light_time->SetLogy();
    hist_light_time->Draw();
    c_light_time->SaveAs("optical_photons_time.png");   

    TCanvas *c_light_step = new TCanvas();
    hist_light_step->SetStats(0);
    hist_light_step->GetXaxis()->SetTitle("Optical photons");
    hist_light_step->GetYaxis()->SetTitle("Entries");
    hist_light_step->Draw();
    c_light_step->SaveAs("optical_photons_step.png");

    TCanvas *c_charge_step = new TCanvas();
    hist_charge_step->SetStats(0);
    hist_charge_step->GetXaxis()->SetTitle("Thermal electrons");
    hist_charge_step->GetYaxis()->SetTitle("Entries");
    hist_charge_step->Draw();
    c_charge_step->SaveAs("thermal_electrons_step.png");

    TCanvas *c_quanta_step = new TCanvas();
    hist_quanta_step->SetStats(0);
    hist_quanta_step->GetXaxis()->SetTitle("Signal quanta");
    hist_quanta_step->GetYaxis()->SetTitle("Entries");
    hist_quanta_step->Draw();
    c_quanta_step->SaveAs("signal_quanta_step.png");*/
}